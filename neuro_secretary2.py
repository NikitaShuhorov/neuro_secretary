import sys
import os
import logging
import hashlib
import asyncio
from dotenv import load_dotenv
import openai
import whisper
import yt_dlp
import numpy as np
import noisereduce as nr
import soundfile as sf
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WHISPER_MODEL = "base"
GPT_MODEL = "gpt-4-turbo"
MAX_DURATION = 2 * 60 * 60  # 2 —á–∞—Å–∞
AUDIO_CACHE = "audio_cache"
os.makedirs(AUDIO_CACHE, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class AudioProcessor:
    @staticmethod
    def download_youtube_audio(url: str) -> str:
        ydl_opts = {
            'format': 'bestaudio/best',
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'wav',
            }],
            'outtmpl': os.path.join(AUDIO_CACHE, '%(id)s.%(ext)s'),
            'quiet': True
        }

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            return ydl.prepare_filename(info).replace(".webm", ".wav")

    @staticmethod
    def clean_audio(input_path: str) -> str:
        try:
            data, rate = sf.read(input_path)
            if len(data) == 0:
                raise ValueError("Empty audio file")
            
            reduced_noise = nr.reduce_noise(y=data, sr=rate)
            output_path = input_path.replace(".wav", "_cleaned.wav")
            sf.write(output_path, reduced_noise, rate)
            return output_path
        except Exception as e:
            logger.error(f"Audio cleaning failed: {e}")
            raise

class MeetingProcessor:
    def __init__(self):
        self.whisper = whisper.load_model(WHISPER_MODEL)
        
    def transcribe(self, audio_path: str) -> str:
        try:
            result = self.whisper.transcribe(audio_path)
            return result["text"]
        except Exception as e:
            logger.error(f"Transcription failed: {e}")
            raise

    @staticmethod
    def analyze_text(text: str) -> str:
        try:
            response = openai.chat.completions.create(
                model=GPT_MODEL,
                messages=[{
                    "role": "system",
                    "content": """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç —Å–æ–≤–µ—â–∞–Ω–∏—è. –í—ã–¥–µ–ª–∏:
1. –£—á–∞—Å—Ç–Ω–∏–∫–∏ (–∏–º—è/—Ä–æ–ª—å)
2. –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
3. –ü—Ä–∏–Ω—è—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è
4. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏ —Å—Ä–æ–∫–∏"""
                }, {
                    "role": "user",
                    "content": text
                }],
                temperature=0.2,
                max_tokens=2000
            )
            return response.choices[0].message.content
        except Exception as e:
            logger.error(f"Text analysis failed: {e}")
            raise

    @staticmethod
    def generate_protocol(analysis: str) -> str:
        try:
            response = openai.chat.completions.create(
                model=GPT_MODEL,
                messages=[{
                    "role": "system",
                    "content": """–°–æ–∑–¥–∞–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª —Å–æ–≤–µ—â–∞–Ω–∏—è –ø–æ —à–∞–±–ª–æ–Ω—É:
–£—á–∞—Å—Ç–Ω–∏–∫–∏: [—Å–ø–∏—Å–æ–∫]
–ü–æ–≤–µ—Å—Ç–∫–∞: [—Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤]
–†–µ—à–µ–Ω–∏—è:
1. [—Ç–µ–∫—Å—Ç] (–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: [–∏–º—è], –°—Ä–æ–∫: [–¥–∞—Ç–∞])
..."""
                }, {
                    "role": "user",
                    "content": analysis
                }],
                temperature=0.5,
                max_tokens=2000
            )
            return response.choices[0].message.content
        except Exception as e:
            logger.error(f"Protocol generation failed: {e}")
            raise

async def handle_audio(update: Update, context):
    try:
        user = update.message.from_user
        logger.info(f"Processing audio from {user.username}")

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        audio_file = await update.message.audio.get_file()
        file_hash = hashlib.md5(audio_file.file_id.encode()).hexdigest()
        input_path = os.path.join(AUDIO_CACHE, f"{file_hash}.wav")
        await audio_file.download_to_drive(input_path)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞
        cleaned_path = AudioProcessor.clean_audio(input_path)
        processor = MeetingProcessor()
        transcript = processor.transcribe(cleaned_path)
        analysis = processor.analyze_text(transcript)
        protocol = processor.generate_protocol(analysis)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await update.message.reply_text(f"‚úÖ –ü—Ä–æ—Ç–æ–∫–æ–ª –≥–æ—Ç–æ–≤:\n\n{protocol}")
        
        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
        os.remove(input_path)
        os.remove(cleaned_path)

    except Exception as e:
        logger.error(f"Error: {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞")

async def handle_youtube(update: Update, context):
    try:
        url = update.message.text
        if "youtube.com" not in url and "youtu.be" not in url:
            await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ YouTube —Å—Å—ã–ª–∫–∞")
            return

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ
        audio_path = AudioProcessor.download_youtube_audio(url)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞
        processor = MeetingProcessor()
        transcript = processor.transcribe(audio_path)
        analysis = processor.analyze_text(transcript)
        protocol = processor.generate_protocol(analysis)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await update.message.reply_text(f"üé• –ü—Ä–æ—Ç–æ–∫–æ–ª –∏–∑ YouTube-–≤–∏–¥–µ–æ:\n\n{protocol}")
        
        # –û—á–∏—Å—Ç–∫–∞
        os.remove(audio_path)

    except Exception as e:
        logger.error(f"YouTube error: {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ YouTube –≤–∏–¥–µ–æ")

async def start(update: Update, context):
    await update.message.reply_text(
        "ü§ñ –ù–µ–π—Ä–æ-—Å–µ–∫—Ä–µ—Ç–∞—Ä—å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "‚Ä¢ –ê—É–¥–∏–æ—Ñ–∞–π–ª —Å –∑–∞–ø–∏—Å—å—é —Å–æ–≤–µ—â–∞–Ω–∏—è\n"
        "‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ\n\n"
        "–Ø —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª!"
    )

def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.AUDIO, handle_audio))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_youtube))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

if __name__ == "__main__":
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    main()
